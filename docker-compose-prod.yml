# Configuration variables are loaded by docker-compose from the .env file

# Ubuntu 16.04.3 LTS has docker-compose 1.8.0, so it doesn't support 3.x
version: "2.0"

services:
  elasticsearch:
    container_name: "${NAME}_elasticsearch"
    image: khezen/elasticsearch:6.2.2
    environment:
      - "CLUSTER_NAME=developers-italia"
      - "ELASTIC_PWD=${ELASTIC_PWD}"
      - "KIBANA_PWD=${KIBANA_PWD}"
      - "ES_TMPDIR=/tmp"
      - "HTTP_SSL=false"
      - "HTTP_CORS_ENABLE=true"
      - "HTTP_CORS_ALLOW_ORIGIN=/^https://(.+\\.)?${PROJECT_BASE_URL}/"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=elasticsearch"
      - "traefik.port=9200"
      - "traefik.frontend.rule=Host:elasticsearch.${PROJECT_BASE_URL}"
      - "traefik.frontend.headers.customRequestHeaders=Authorization: Basic ${ELASTIC_BASIC_AUTH_TOKEN}"
      - "traefik.frontend.rateLimit.extractorFunc=client.ip"
      - "traefik.frontend.rateLimit.rateSet.elasticsearch.period=60s"
      - "traefik.frontend.rateLimit.rateSet.elasticsearch.average=100"
      - "traefik.frontend.rateLimit.rateSet.elasticsearch.burst=200"
    ports:
      - "9200:9200"
    restart: always
    volumes:
      - es_data:/elasticsearch/data
      - ./docker/elasticsearch/config/elasticsearch.yml:/elasticsearch/config/elasticsearch.yml
      - ./docker/elasticsearch/config/searchguard/sg_action_groups.yml:/elasticsearch/config/searchguard/sg_action_groups.yml
      - ./docker/elasticsearch/config/searchguard/sg_internal_users.yml:/elasticsearch/config/searchguard/sg_internal_users.yml
      - ./docker/elasticsearch/config/searchguard/sg_roles.yml:/elasticsearch/config/searchguard/sg_roles.yml
      - ./docker/elasticsearch/config/searchguard/sg_roles_mapping.yml:/elasticsearch/config/searchguard/sg_roles_mapping.yml

  kibana:
    container_name: "${NAME}_kibana"
    image: khezen/kibana:6.2.2
    environment:
      - "ELASTICSEARCH_PROTOCOL=http"
      - "ELASTICSEARCH_HOST=elasticsearch"
      - "ELASTICSEARCH_PORT=9200"
      - "KIBANA_PWD=${KIBANA_PWD}"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=kibana"
      - "traefik.port=5601"
      - "traefik.frontend.rule=Host:kibana.${PROJECT_BASE_URL}"
    restart: always
    volumes:
      - ./docker/kibana/config/kibana.yml:/opt/kibana-6.2.2-linux-x86_64/config/kibana.yml

  prometheus:
    container_name: "${NAME}_prometheus"
    image: quay.io/prometheus/prometheus:v2.2.1
    labels:
      - "traefik.enable=true"
      - "traefik.backend=prometheus"
      - "traefik.port=9090"
      - "traefik.frontend.rule=Host:prometheus.${PROJECT_BASE_URL}"
    restart: always
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  web:
    container_name: "${NAME}_web"
    image: nginx:1.15-alpine
    labels:
      - "traefik.enable=true"
      - "traefik.backend=web"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:${PROJECT_BASE_URL}"
    restart: always
    volumes:
      - /var/www/developers.italia.it/_site:/usr/share/nginx/html

  proxy:
    command: --docker --docker.exposedByDefault=false --entryPoints="Name:http Address::8095"
    container_name: "${NAME}_proxy"
    image: containous/traefik:experimental
    ports:
      - "8095:8095"
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  es_data:
    driver: local

# SPC Cloud machines have MTU 1400, and docker-compose does not automatically pick
# the host daemon MTU.
# https://github.com/moby/moby/issues/22297
# https://github.com/docker/compose/issues/3438
networks:
  default:
    driver_opts:
      com.docker.network.driver.mtu: 1400
